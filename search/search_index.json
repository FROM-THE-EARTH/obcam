{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"obcam obcam is the flight camera module and program for the OB team rocket in NSE 2022. See the site for details. Install After configuration for network connection and installation of git and pip , run python -m pip install git+https://github.com/FROM-THE-EARTH/obcam.git Install and Activate the flight camera mode After configuration for network connection and installation of git , run git clone https://github.com/FROM-THE-EARTH/obcam.git cd obcam # After filling out and confirming the glm.py # See the documentation for detail of the settings. sudo ./install.sh Scripts Scripts in the scripts directory may be useful if you want some small operations like installing just obcam , activate the flight camera mode, or deactivate the flight camera mode. See the site for more information. activate_flightcam.sh This script activates the flight camera mode of the obcam . In the flight camera mode, the program of the obcam run automatically when booting. deactivate_flightcam.sh This script deactivates the flight camera mode. install_obcam.sh This script installs the obcam module using pip . Note that pip should be installed before executing this script. install_pip.sh This script installs pip . Note that pip could be not installed yet right after the first booting. Thus, this script might be useful in the situation. uninstall_obcam.sh This script uninstalls the obcam module using pip .","title":"Home"},{"location":"#obcam","text":"obcam is the flight camera module and program for the OB team rocket in NSE 2022. See the site for details.","title":"obcam"},{"location":"#install","text":"After configuration for network connection and installation of git and pip , run python -m pip install git+https://github.com/FROM-THE-EARTH/obcam.git","title":"Install"},{"location":"#install-and-activate-the-flight-camera-mode","text":"After configuration for network connection and installation of git , run git clone https://github.com/FROM-THE-EARTH/obcam.git cd obcam # After filling out and confirming the glm.py # See the documentation for detail of the settings. sudo ./install.sh","title":"Install and Activate the flight camera mode"},{"location":"#scripts","text":"Scripts in the scripts directory may be useful if you want some small operations like installing just obcam , activate the flight camera mode, or deactivate the flight camera mode. See the site for more information. activate_flightcam.sh This script activates the flight camera mode of the obcam . In the flight camera mode, the program of the obcam run automatically when booting. deactivate_flightcam.sh This script deactivates the flight camera mode. install_obcam.sh This script installs the obcam module using pip . Note that pip should be installed before executing this script. install_pip.sh This script installs pip . Note that pip could be not installed yet right after the first booting. Thus, this script might be useful in the situation. uninstall_obcam.sh This script uninstalls the obcam module using pip .","title":"Scripts"},{"location":"checklist/","text":"Checklist Advance Preparation Make more than 2 SD cards Raspberry Pi OS Lite (32bit), referencing the section . Connect a monitor and keyboard to the Raspberry Pi. Boot the Raspberry Pi. Configure the keyboard setting. Configure the system settings using raspi-config , referencing the section . WiFi setting for network connection. Enabling legacy camera support. Install git : sudo apt update sudo apt install -y git Clone the obcam repository: git clone https://github.com/FROM-THE-EARTH/obcam.git cd obcam Confirm glm.py in the repository and change the content if necessary. # Confirm the content less glm.py # Change the content vi glm.py Install obcam and activate the flight camera mode: sudo ./install.sh Reboot the system: sudo reboot Check the LED is blinking (which means the program waits for connection of a flight pin). If the LED is blinking, then all preparation is done. Otherwise, connect a monitor and keyboard to the Raspberry Pi and view log output from the program. For more log output, you can change value of the parameter log_level to logging.DEBUG in /usr/local/src/obcam/glm.py : sudo vi /usr/local/src/obcam/glm.py # in the file # # ... - log_level = logging.INFO, + log_level = logging.DEBUG, In a rocket range Connect a Raspberry Pi which is setup already, flight pin cable, and 9V battery to the board. Confirm the LED is blinking. If the flight pin is already connected, the LED doesn't blink but is turned off. If the LED is being turned off dispite the flight pin is disconnected, connect a monitor and keyboard to the Raspberry Pi and vie log output from the program. If the camera is not detected, try to enable legacy camera support referencing the section and reconnect camera cable. If the program is executed successfully, put the board in to a plastic bag. Close up the zipper of the plastic bag using curing tape. Put the plastic bag in to another platic bag and close up the zipper again. Put some block of styrofoam in to the nose corn. Put the camera in to the nose cone and fix the camera using curing tape. Put the plastic bag in to the nose corn. Connect the flight pin cable to the cable for the main board. Connect the flight pin. If you need, activate certain command . After collecting the body Remove the SD card from the Raspberry Pi and clean the SD card. Insert the SD card to your PC. Extract the movie file and log file from the SD, referencing the section . Confirm the movie and log.","title":"Checklist"},{"location":"checklist/#checklist","text":"","title":"Checklist"},{"location":"checklist/#advance-preparation","text":"Make more than 2 SD cards Raspberry Pi OS Lite (32bit), referencing the section . Connect a monitor and keyboard to the Raspberry Pi. Boot the Raspberry Pi. Configure the keyboard setting. Configure the system settings using raspi-config , referencing the section . WiFi setting for network connection. Enabling legacy camera support. Install git : sudo apt update sudo apt install -y git Clone the obcam repository: git clone https://github.com/FROM-THE-EARTH/obcam.git cd obcam Confirm glm.py in the repository and change the content if necessary. # Confirm the content less glm.py # Change the content vi glm.py Install obcam and activate the flight camera mode: sudo ./install.sh Reboot the system: sudo reboot Check the LED is blinking (which means the program waits for connection of a flight pin). If the LED is blinking, then all preparation is done. Otherwise, connect a monitor and keyboard to the Raspberry Pi and view log output from the program. For more log output, you can change value of the parameter log_level to logging.DEBUG in /usr/local/src/obcam/glm.py : sudo vi /usr/local/src/obcam/glm.py # in the file # # ... - log_level = logging.INFO, + log_level = logging.DEBUG,","title":"Advance Preparation"},{"location":"checklist/#in-a-rocket-range","text":"Connect a Raspberry Pi which is setup already, flight pin cable, and 9V battery to the board. Confirm the LED is blinking. If the flight pin is already connected, the LED doesn't blink but is turned off. If the LED is being turned off dispite the flight pin is disconnected, connect a monitor and keyboard to the Raspberry Pi and vie log output from the program. If the camera is not detected, try to enable legacy camera support referencing the section and reconnect camera cable. If the program is executed successfully, put the board in to a plastic bag. Close up the zipper of the plastic bag using curing tape. Put the plastic bag in to another platic bag and close up the zipper again. Put some block of styrofoam in to the nose corn. Put the camera in to the nose cone and fix the camera using curing tape. Put the plastic bag in to the nose corn. Connect the flight pin cable to the cable for the main board. Connect the flight pin. If you need, activate certain command .","title":"In a rocket range"},{"location":"checklist/#after-collecting-the-body","text":"Remove the SD card from the Raspberry Pi and clean the SD card. Insert the SD card to your PC. Extract the movie file and log file from the SD, referencing the section . Confirm the movie and log.","title":"After collecting the body"},{"location":"flightcam/","text":"FlightCamera Assembly If you finish activation of the flight camera mode referencing the page , you can go forward to the next step, assembly of the module. In this section, details of components and their assembly are explained. Board Overview The figure below is a board of the flight camera module. The module has some features: Status LED tells status of the program in the flight camera mode. XH pin socket is the interface to a flight pin. Raspberry Pi Zero The below picture is of a Raspberry Pi Zero. Raspberry Pi Zero has 40 of GPIO pins and some interfaces, e.g. HDMI, USB and Raspberry Pi Camera. It is recommended to connect to a monitor and keyboard when you setup a Raspberry Pi. Setup a Raspberry Pi Zero without a monitor There is a way to setup a Raspberry Pi Zero without a monitor, but it is not recommended because it has more steps for setup and you cannot get any signals if there is something wrong. Connecting a Camera Prepare a Raspberry Pi Camera and flexible cable for Raspberry Pi Zero. Note that the cable for Raspberry Pi Zero is not same as one of Type A or B. Raspberry Pi Zero has a camera socket and its stopper (black part of the bottom). Put the stopper down to insert the cable. Insert the cable into the socket and put the stopper in to fix the cable. Board Assembly Insert GPIO pins into the pin socket on the board. Connect a flight pin cable to the XH socket. Put in a 9V battery to the battery holder. And then, the Raspberry Pi starts to boot. Flow of the program Operations Program starts at booting. Status LED blinks until the flight pin is connected. After the flight pin is connected, the status LED is turned off until the flight pin is to be disconnected. When the flight pin is disconnected, the stauts LED is turned on and recording starts. Observing if any commands occur while recording. When the time elapses to the value of timeout or a command is detected, recording stops. If the setting is configured, the system is automatically shutted down. Commands There are some commands for users to operate state of the program. name condition description NULL --- No commands are activated. RESTART Flight pin connection in more than threshold_restart seconds. Program will stop recording and restart from the begging. Parameter threshold_restart can be set in glm.py , defaults 5 seconds. EXIT Flight pin connection in less than threshold_exit seconds, and then disconnection in more than threshold_exit seconds. Program will stop recording and exit immediately without shutting down. Parameter threshold_exit can be set in glm.py , defaults 2 seconds. Flowchart Characters in red in the flowchart below are parameters in the application. For more information, see Setting . Outputs The flight camera application outputs two kinds of files, one is a movie file and the other is a log file. Movie Files Movie files are the main outputs of the application. You can specify path to a movie file before activating the flight camera mode, by writing the path to glm.py . See Setting for details. In the default setting, the format of movie files is .h264 . This format could not be played in your favorite movie player. It is recommended using VLC media player for playing the format of movies. However, there can exist block noise when playing .h264 videos, so it might be ideal that you convert .h264 format to .mp4 (which is possible using like the site ). Log Files Log files are useful to analysis state of the application, especially during debug. You can also specify path to a log file before activating the flight camera mode. See Setting for more information. The log level of the application can be changed in glm.py . You can specify logging.DEBUG as parameter log_level to output verbose log for debugging. Below is an example of the log output. [2022-08-02 03:59:53,126] [INFO] Start the Flight camera mode. Setting; glm_name: main, timeout: 210.0, pin_flight: 22, pin_led: 12, file_mov: mov-220802-035953.h264, file_log: mov-220802-035953.log, parent_dir: None, resolution: (1920, 1080), framerate: 30, interval: 0.1, led_blink_freq: 2.0, log_level: 20, check_waiting_time: False [2022-08-02 03:59:53,218] [INFO] Waiting a flight pin to be connected... [2022-08-02 04:00:01,074] [INFO] Detected that the flight pin was connected. [2022-08-02 04:00:01,075] [INFO] Wating the flight pin to be disconnected... [2022-08-02 04:00:03,034] [INFO] Detected that the flight pin was disconnected. [2022-08-02 04:00:03,034] [INFO] Start recording. [2022-08-02 04:03:33,151] [INFO] Stop recording. Extract data from SD cards Your Windows couldn't recognize data in SD cards used in Raspberry Pi because of difference of formats. Thus, you should do unusual operation to extract the data. Use 3rd-party applications There are some applications that can read data in ext file systems like Raspberry Pi. You can pick favorite one from the list below: extFS for Windows Linux Reader Transfer via HTTP If you have another Raspbery Pi, which is not broken and whose WiFi setting (tethering is recommended) is already done, you can insert the SD card to the Raspberry Pi and transfer data via HTTP communication. Enable network connection of a Raspberry Pi. If network setting is not done yet, configure referencing the section . Confirm IP address of the Raspberry Pi: ip a # Example of output # ... # 2: wlan0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc mq state UP group default qlen 1000 # link/ether ff:ff:ff:ff:ff:ff brd ff:ff:ff:ff:ff:ff # inet 192.168.x.x/24 brd 192.168.x.255 scope global noprefixroute eth0 # \u2191 this is the IP address. Change the working directory to directory which has files you want to send. cd [ /path/to/directory ] # e.g. cd / Start HTTP server specifying the IP address. # Change the IP address to one of your environment. sudo python -m http.server -b 192 .168.x.x 80 Open a browser in your smart phone or PC in the same network as the Raspbery Pi. Enter the URL: # Change the IP address to one of your environment. # Change the file name to one you want to send. http://192.168.x.x/[file_name] Transfer via SSH If you have another Raspbery Pi, which is not broken and whose WiFi setting (tethering is recommended) is already done, you can insert the SD card to the Raspberry Pi and transfer data via SSH communication. Enable network connection of a Raspberry Pi. If network setting is not done yet, configure referencing the section . Enable the SSH server: sudo raspi-config # 1. Select [Interface Options] # 2. Select [SSH] # 3. Select [Yes] Confirm IP address of the Raspberry Pi: ip a # Example of output # ... # 2: wlan0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc mq state UP group default qlen 1000 # link/ether ff:ff:ff:ff:ff:ff brd ff:ff:ff:ff:ff:ff # inet 192.168.x.x/24 brd 192.168.x.255 scope global noprefixroute eth0 # \u2191 this is the IP address. Open a terminal (PowerShell in Windows) in your PC in the same network as the Raspberry Pi, and run the command: # Change the IP address to one of your environment. # Change paths in remote and local to ones you want to send and received. scp obteam@192.168.x.x:/path/to/file /local/path/to/file # Enter passphrase of the Raspberry Pi.","title":"FlightCamera"},{"location":"flightcam/#flightcamera","text":"","title":"FlightCamera"},{"location":"flightcam/#assembly","text":"If you finish activation of the flight camera mode referencing the page , you can go forward to the next step, assembly of the module. In this section, details of components and their assembly are explained.","title":"Assembly"},{"location":"flightcam/#board-overview","text":"The figure below is a board of the flight camera module. The module has some features: Status LED tells status of the program in the flight camera mode. XH pin socket is the interface to a flight pin.","title":"Board Overview"},{"location":"flightcam/#raspberry-pi-zero","text":"The below picture is of a Raspberry Pi Zero. Raspberry Pi Zero has 40 of GPIO pins and some interfaces, e.g. HDMI, USB and Raspberry Pi Camera. It is recommended to connect to a monitor and keyboard when you setup a Raspberry Pi. Setup a Raspberry Pi Zero without a monitor There is a way to setup a Raspberry Pi Zero without a monitor, but it is not recommended because it has more steps for setup and you cannot get any signals if there is something wrong.","title":"Raspberry Pi Zero"},{"location":"flightcam/#connecting-a-camera","text":"Prepare a Raspberry Pi Camera and flexible cable for Raspberry Pi Zero. Note that the cable for Raspberry Pi Zero is not same as one of Type A or B. Raspberry Pi Zero has a camera socket and its stopper (black part of the bottom). Put the stopper down to insert the cable. Insert the cable into the socket and put the stopper in to fix the cable.","title":"Connecting a Camera"},{"location":"flightcam/#board-assembly","text":"Insert GPIO pins into the pin socket on the board. Connect a flight pin cable to the XH socket. Put in a 9V battery to the battery holder. And then, the Raspberry Pi starts to boot.","title":"Board Assembly"},{"location":"flightcam/#flow-of-the-program","text":"","title":"Flow of the program"},{"location":"flightcam/#operations","text":"Program starts at booting. Status LED blinks until the flight pin is connected. After the flight pin is connected, the status LED is turned off until the flight pin is to be disconnected. When the flight pin is disconnected, the stauts LED is turned on and recording starts. Observing if any commands occur while recording. When the time elapses to the value of timeout or a command is detected, recording stops. If the setting is configured, the system is automatically shutted down.","title":"Operations"},{"location":"flightcam/#commands","text":"There are some commands for users to operate state of the program. name condition description NULL --- No commands are activated. RESTART Flight pin connection in more than threshold_restart seconds. Program will stop recording and restart from the begging. Parameter threshold_restart can be set in glm.py , defaults 5 seconds. EXIT Flight pin connection in less than threshold_exit seconds, and then disconnection in more than threshold_exit seconds. Program will stop recording and exit immediately without shutting down. Parameter threshold_exit can be set in glm.py , defaults 2 seconds.","title":"Commands"},{"location":"flightcam/#flowchart","text":"Characters in red in the flowchart below are parameters in the application. For more information, see Setting .","title":"Flowchart"},{"location":"flightcam/#outputs","text":"The flight camera application outputs two kinds of files, one is a movie file and the other is a log file.","title":"Outputs"},{"location":"flightcam/#movie-files","text":"Movie files are the main outputs of the application. You can specify path to a movie file before activating the flight camera mode, by writing the path to glm.py . See Setting for details. In the default setting, the format of movie files is .h264 . This format could not be played in your favorite movie player. It is recommended using VLC media player for playing the format of movies. However, there can exist block noise when playing .h264 videos, so it might be ideal that you convert .h264 format to .mp4 (which is possible using like the site ).","title":"Movie Files"},{"location":"flightcam/#log-files","text":"Log files are useful to analysis state of the application, especially during debug. You can also specify path to a log file before activating the flight camera mode. See Setting for more information. The log level of the application can be changed in glm.py . You can specify logging.DEBUG as parameter log_level to output verbose log for debugging. Below is an example of the log output. [2022-08-02 03:59:53,126] [INFO] Start the Flight camera mode. Setting; glm_name: main, timeout: 210.0, pin_flight: 22, pin_led: 12, file_mov: mov-220802-035953.h264, file_log: mov-220802-035953.log, parent_dir: None, resolution: (1920, 1080), framerate: 30, interval: 0.1, led_blink_freq: 2.0, log_level: 20, check_waiting_time: False [2022-08-02 03:59:53,218] [INFO] Waiting a flight pin to be connected... [2022-08-02 04:00:01,074] [INFO] Detected that the flight pin was connected. [2022-08-02 04:00:01,075] [INFO] Wating the flight pin to be disconnected... [2022-08-02 04:00:03,034] [INFO] Detected that the flight pin was disconnected. [2022-08-02 04:00:03,034] [INFO] Start recording. [2022-08-02 04:03:33,151] [INFO] Stop recording.","title":"Log Files"},{"location":"flightcam/#extract-data-from-sd-cards","text":"Your Windows couldn't recognize data in SD cards used in Raspberry Pi because of difference of formats. Thus, you should do unusual operation to extract the data. Use 3rd-party applications There are some applications that can read data in ext file systems like Raspberry Pi. You can pick favorite one from the list below: extFS for Windows Linux Reader Transfer via HTTP If you have another Raspbery Pi, which is not broken and whose WiFi setting (tethering is recommended) is already done, you can insert the SD card to the Raspberry Pi and transfer data via HTTP communication. Enable network connection of a Raspberry Pi. If network setting is not done yet, configure referencing the section . Confirm IP address of the Raspberry Pi: ip a # Example of output # ... # 2: wlan0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc mq state UP group default qlen 1000 # link/ether ff:ff:ff:ff:ff:ff brd ff:ff:ff:ff:ff:ff # inet 192.168.x.x/24 brd 192.168.x.255 scope global noprefixroute eth0 # \u2191 this is the IP address. Change the working directory to directory which has files you want to send. cd [ /path/to/directory ] # e.g. cd / Start HTTP server specifying the IP address. # Change the IP address to one of your environment. sudo python -m http.server -b 192 .168.x.x 80 Open a browser in your smart phone or PC in the same network as the Raspbery Pi. Enter the URL: # Change the IP address to one of your environment. # Change the file name to one you want to send. http://192.168.x.x/[file_name] Transfer via SSH If you have another Raspbery Pi, which is not broken and whose WiFi setting (tethering is recommended) is already done, you can insert the SD card to the Raspberry Pi and transfer data via SSH communication. Enable network connection of a Raspberry Pi. If network setting is not done yet, configure referencing the section . Enable the SSH server: sudo raspi-config # 1. Select [Interface Options] # 2. Select [SSH] # 3. Select [Yes] Confirm IP address of the Raspberry Pi: ip a # Example of output # ... # 2: wlan0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc mq state UP group default qlen 1000 # link/ether ff:ff:ff:ff:ff:ff brd ff:ff:ff:ff:ff:ff # inet 192.168.x.x/24 brd 192.168.x.255 scope global noprefixroute eth0 # \u2191 this is the IP address. Open a terminal (PowerShell in Windows) in your PC in the same network as the Raspberry Pi, and run the command: # Change the IP address to one of your environment. # Change paths in remote and local to ones you want to send and received. scp obteam@192.168.x.x:/path/to/file /local/path/to/file # Enter passphrase of the Raspberry Pi.","title":"Extract data from SD cards"},{"location":"scripts/","text":"Scripts There are some executable shell scripts in the repository. You can run the scripts if downloading the repository to local. In many cases, you should execute the scripts as the root user. install.sh This script installs obcam and activates the flight camera mode simultaneously. This script is executed using other scripts below, so you should not delete other scripts. This script requires network connection. sudo ./install.sh scripts/activate_flightcam.sh This script activates the flight camera mode. sudo scripts/activate_flightcam.sh scripts/deactivate_flightcam.sh This script deactivates the flight camera mode. sudo scripts/deactivate_flightcam.sh scripts/install_obcam.sh This script just installs obcam using pip , but doesn't activate the flight camera mode. This script requires network connection. sudo scripts/install_obcam.sh scripts/install_pip.sh This script installs pip . This script requires network connection. sudo scripts/install_pip.sh scripts/uninstall_obcam.sh This script uninstalls obcam using pip . sudo scripts/uninstall_obcam.sh","title":"Scripts"},{"location":"scripts/#scripts","text":"There are some executable shell scripts in the repository. You can run the scripts if downloading the repository to local. In many cases, you should execute the scripts as the root user.","title":"Scripts"},{"location":"scripts/#installsh","text":"This script installs obcam and activates the flight camera mode simultaneously. This script is executed using other scripts below, so you should not delete other scripts. This script requires network connection. sudo ./install.sh","title":"install.sh"},{"location":"scripts/#scriptsactivate_flightcamsh","text":"This script activates the flight camera mode. sudo scripts/activate_flightcam.sh","title":"scripts/activate_flightcam.sh"},{"location":"scripts/#scriptsdeactivate_flightcamsh","text":"This script deactivates the flight camera mode. sudo scripts/deactivate_flightcam.sh","title":"scripts/deactivate_flightcam.sh"},{"location":"scripts/#scriptsinstall_obcamsh","text":"This script just installs obcam using pip , but doesn't activate the flight camera mode. This script requires network connection. sudo scripts/install_obcam.sh","title":"scripts/install_obcam.sh"},{"location":"scripts/#scriptsinstall_pipsh","text":"This script installs pip . This script requires network connection. sudo scripts/install_pip.sh","title":"scripts/install_pip.sh"},{"location":"scripts/#scriptsuninstall_obcamsh","text":"This script uninstalls obcam using pip . sudo scripts/uninstall_obcam.sh","title":"scripts/uninstall_obcam.sh"},{"location":"setting/","text":"Setting gileum file gileum files are kinds of setting files of the application. In a gileum file, an object of the OBCamGileum should be created. The default gileum file is prepared in the repository . If necessary, you can change the content of the gileum file and apply the setting when executing the flight camera application. OBCamGileum This class is the setting class of the application. You should only instantiate the class giving the parameters below. timeout Length of recording time. pin_flight Pin number for a flight pin, defaults 22 . pin_led Pin number for a status LED, defaults 12 . file_mov Path to new video file, defaults None . file_log Path to new log file, defualts None . parent_dir Path to the parent directory of output files, defaults None . If a specfied directory doesn't exist, the program automatically create the repository. resolution Resolution of the video to be recorded, defaults (1920, 1080) . You cannot make the value greater than the default value, because (1920, 1080) is about maximum value. framerate Framerate of the video to be recorded, defaults 30 . You cannot make the value greater than the default value, because 30 fps is about maximum value. interval_recording Wating time for recording, 0.1 . led_blink_freq Frequency of LED blinking, defaults 2. . log_level Log level used in the application, defaults logging.INFO ( 20 ). check_waiting_time If making log outputs during waiting time for disconnection of the flight pin or not, defaults False . interval_waiting_time Interval of waiting time until the flight pin is disconnected, defaults 0.1 . This parameter doesn't valid when the parameter check_waiting_time is False . shutdown_after_recording If shutting down the system after recording or not. interval_watching Interval of watching processes in other threads, defualts 0.1 . threshold_restart Time threshold of waiting time to activate the command restart , defaults 5. . The command restart is activated if the flight pin is connected again for more than threshold_restart seconds during recording.\"\"\" threshold_exit Time threshold of waiting time to activate the command exit , defaults 2. . The command exit is activated if the flight pin is connected for less than threshold_exit seconds and disconnected again for more than threshold_exit seconds during recording.\"\"\" Examples import logging from obcam import OBCamGileum glm = OBCamGileum ( # Make the timeout shorter for tests. timeout = 10 , # Change path to the movie file. file_mov = \"test.h254\" , # Change path to the log file. flie_log = \"test.log\" , # Set the parent directory of the output files. parent_dir = \"/obcam-out\" # Make the frequency smaller. led_blink_freq = 1. , # Make verbose log outputs for tests. log_level = logging . DEBUG , # Observe waiting time until the flight pin is disconnected. check_waiting_time = True , # Use the default settings. # To use defualt values, you don't have to give corresponding arguments. pin_flight = 22 , pin_led = 12 , resolution = ( 1920 , 1080 ), framerate = 30 , interval_recording = 0.1 , interval_waiting_time = 0.1 , shutdown_after_recording = True , interval_watching = 0.1 , threshold_restart = 5. , threshold_exit = 2. , )","title":"Setting"},{"location":"setting/#setting","text":"","title":"Setting"},{"location":"setting/#gileum-file","text":"gileum files are kinds of setting files of the application. In a gileum file, an object of the OBCamGileum should be created. The default gileum file is prepared in the repository . If necessary, you can change the content of the gileum file and apply the setting when executing the flight camera application.","title":"gileum file"},{"location":"setting/#obcamgileum","text":"This class is the setting class of the application. You should only instantiate the class giving the parameters below.","title":"OBCamGileum"},{"location":"setting/#timeout","text":"Length of recording time.","title":"timeout"},{"location":"setting/#pin_flight","text":"Pin number for a flight pin, defaults 22 .","title":"pin_flight"},{"location":"setting/#pin_led","text":"Pin number for a status LED, defaults 12 .","title":"pin_led"},{"location":"setting/#file_mov","text":"Path to new video file, defaults None .","title":"file_mov"},{"location":"setting/#file_log","text":"Path to new log file, defualts None .","title":"file_log"},{"location":"setting/#parent_dir","text":"Path to the parent directory of output files, defaults None . If a specfied directory doesn't exist, the program automatically create the repository.","title":"parent_dir"},{"location":"setting/#resolution","text":"Resolution of the video to be recorded, defaults (1920, 1080) . You cannot make the value greater than the default value, because (1920, 1080) is about maximum value.","title":"resolution"},{"location":"setting/#framerate","text":"Framerate of the video to be recorded, defaults 30 . You cannot make the value greater than the default value, because 30 fps is about maximum value.","title":"framerate"},{"location":"setting/#interval_recording","text":"Wating time for recording, 0.1 .","title":"interval_recording"},{"location":"setting/#led_blink_freq","text":"Frequency of LED blinking, defaults 2. .","title":"led_blink_freq"},{"location":"setting/#log_level","text":"Log level used in the application, defaults logging.INFO ( 20 ).","title":"log_level"},{"location":"setting/#check_waiting_time","text":"If making log outputs during waiting time for disconnection of the flight pin or not, defaults False .","title":"check_waiting_time"},{"location":"setting/#interval_waiting_time","text":"Interval of waiting time until the flight pin is disconnected, defaults 0.1 . This parameter doesn't valid when the parameter check_waiting_time is False .","title":"interval_waiting_time"},{"location":"setting/#shutdown_after_recording","text":"If shutting down the system after recording or not.","title":"shutdown_after_recording"},{"location":"setting/#interval_watching","text":"Interval of watching processes in other threads, defualts 0.1 .","title":"interval_watching"},{"location":"setting/#threshold_restart","text":"Time threshold of waiting time to activate the command restart , defaults 5. . The command restart is activated if the flight pin is connected again for more than threshold_restart seconds during recording.\"\"\"","title":"threshold_restart"},{"location":"setting/#threshold_exit","text":"Time threshold of waiting time to activate the command exit , defaults 2. . The command exit is activated if the flight pin is connected for less than threshold_exit seconds and disconnected again for more than threshold_exit seconds during recording.\"\"\"","title":"threshold_exit"},{"location":"setting/#examples","text":"import logging from obcam import OBCamGileum glm = OBCamGileum ( # Make the timeout shorter for tests. timeout = 10 , # Change path to the movie file. file_mov = \"test.h254\" , # Change path to the log file. flie_log = \"test.log\" , # Set the parent directory of the output files. parent_dir = \"/obcam-out\" # Make the frequency smaller. led_blink_freq = 1. , # Make verbose log outputs for tests. log_level = logging . DEBUG , # Observe waiting time until the flight pin is disconnected. check_waiting_time = True , # Use the default settings. # To use defualt values, you don't have to give corresponding arguments. pin_flight = 22 , pin_led = 12 , resolution = ( 1920 , 1080 ), framerate = 30 , interval_recording = 0.1 , interval_waiting_time = 0.1 , shutdown_after_recording = True , interval_watching = 0.1 , threshold_restart = 5. , threshold_exit = 2. , )","title":"Examples"},{"location":"setup/","text":"Setup Environment Raspberry Pi Zero Raspberry Pi Camera V2 Raspberry Pi OS Lite Setup of the OS Raspberry Pi Imager enables brief preparation for booting Raspberry Pi OS. Steps for writing an OS image to micro SD Install Raspberry Pi Imager . Open Raspberry Pi Imager. Select Raspberry Pi OS Lite (32bit) as OS. Select a SD card the OS is written in. Click WRITE . Essential system setttings in raspi-config Users can configure some essential settings using raspi-config . raspi-config can be executed by the command (note that it should be executed as the root user): sudo raspi-config raspi-config enables users to configure settings interactively, showing the interface like below: Users of obcam should configure: WiFi setting for network connection. Enabling legacy camera support. Rebooting after configuration. Most configuration in the raspi-config requires rebooting. Thus, you should reboot the system before executing the flight camera application. WiFi setting In the raspi-config interface, Select System Options . Select Wireless LAN . Select your country (e.g. JP Japan ). Enter SSID. Enter passphrase. Tethering Tethering by your smart phone is a good choice for WiFi access point and router. If you want to use tethering, you enter its SSID and passphrase while the setting above. Enabling legacy camera support In the raspi-config interface, Select Interface Options . Select Legacy Camera . Select Yes . Select OK . Legacy camera support The latest version of Raspberry Pi OS supports new camera interface using libcamera , so it deprecates using legacy camera support. But picamera , which is a Python module for using Raspberry Pi Camera and used in obcam , is implemented using the legacy camera interface. Therefore, you should enable it. Brief setup for the flight camera mode Using this method, you can install obcam and activate the flight camera mode simultaneously. The brief setup gets under way using the script install.sh in the repository . If you want to know the steps of activation of the flight camera mode, see the section First you should download the repository using git clone (which requires network connection): git clone https://github.com/FROM-THE-EARTH/obcam.git And then, you can execute the brief setup like below: cd obcam sudo ./install.sh That's all setup of the flight camera mode of obcam . You can reboot the Raspberry Pi and run the flight camera program. Installation of git If git is not installed in the system, you can run the commands below and install git : sudo apt update sudo apt install git Install only obcam module obcam can be installed using pip . pip install git+https://github.com/FROM-THE-EARTH/obcam.git After the installation, you can use the obcam command to start the flight camera application. If pip is not installed in the system Right after the first booting of Raspberry Pi, pip might be not installed yet. In the situation, you can install pip following the procedures below: Download the script to install pip . After the command below is executed, the script get-pip.py is to be downloaded in the current directory. wget https://bootstrap.pypa.io/get-pip.py Execute the script get-pip.py . python get-pip.py Activate the flight camera mode About the flight camera mode In the flight camera mode, the application of the flight camera automatically starts when booting a Raspberry Pi. To activate the flight camera mode, the procedures below is required: Network and camera settings . Install obcam . Writing a gileum file for the flight camera . Activate the flight camera mode . Writing a gileum file Gileum files are kinds of setting files of the application. You should write a gileum file glm.py before activation of the flight camera mode. The gileum file glm.py is in the repository, so you can overwrite the file after downloding the repository. Details of the setting parameters are written in the page . But please note that the settings are already done in the glm.py when downloading the repository, so you doesn't have to change the settings if there are no certain reasons . Just activate the flight camera mode Using the script scripts/activate_flightcam.sh , you can activate the flight camera mode. The scripts/activate_flihgtcam.sh is also in the repository . sudo ./scripts/activate_flightcam.sh Details of the activation In this section, details of the activate process is described. The process is not complicated so much. The point is to update the /etc/rc.local file in the system. The file /etc/rc.local is a shell script to be executed at booting. The script scripts/activate_flightcam.sh inserts the line to /etc/rc.local , in order to execute the obcam program like that: # /etc/rc.local # Some lines ... /usr/bin/python -m obcam /usr/local/src/obcam/glm.py exit 0 As you can see, the obcam program is executed giving the gileum file /usr/local/src/obcam/glm.py , which is copied when executing scripts/activate_flightcam.sh . Therefore, there is no effects in terms of the flight camera application if you change the content of the glm.py in the downloaded repository, because obcam refers /usr/local/src/obcam/glm.py . If you want apply the change of the glm.py in the downloaded repository, just run scripts/activate_flightcam.sh again, or copy the glm.py to /usr/local/src/obcam/glm.py .","title":"Setup"},{"location":"setup/#setup","text":"","title":"Setup"},{"location":"setup/#environment","text":"Raspberry Pi Zero Raspberry Pi Camera V2 Raspberry Pi OS Lite","title":"Environment"},{"location":"setup/#setup-of-the-os","text":"Raspberry Pi Imager enables brief preparation for booting Raspberry Pi OS. Steps for writing an OS image to micro SD Install Raspberry Pi Imager . Open Raspberry Pi Imager. Select Raspberry Pi OS Lite (32bit) as OS. Select a SD card the OS is written in. Click WRITE .","title":"Setup of the OS"},{"location":"setup/#essential-system-setttings-in-raspi-config","text":"Users can configure some essential settings using raspi-config . raspi-config can be executed by the command (note that it should be executed as the root user): sudo raspi-config raspi-config enables users to configure settings interactively, showing the interface like below: Users of obcam should configure: WiFi setting for network connection. Enabling legacy camera support. Rebooting after configuration. Most configuration in the raspi-config requires rebooting. Thus, you should reboot the system before executing the flight camera application.","title":"Essential system setttings in raspi-config"},{"location":"setup/#wifi-setting","text":"In the raspi-config interface, Select System Options . Select Wireless LAN . Select your country (e.g. JP Japan ). Enter SSID. Enter passphrase. Tethering Tethering by your smart phone is a good choice for WiFi access point and router. If you want to use tethering, you enter its SSID and passphrase while the setting above.","title":"WiFi setting"},{"location":"setup/#enabling-legacy-camera-support","text":"In the raspi-config interface, Select Interface Options . Select Legacy Camera . Select Yes . Select OK . Legacy camera support The latest version of Raspberry Pi OS supports new camera interface using libcamera , so it deprecates using legacy camera support. But picamera , which is a Python module for using Raspberry Pi Camera and used in obcam , is implemented using the legacy camera interface. Therefore, you should enable it.","title":"Enabling legacy camera support"},{"location":"setup/#brief-setup-for-the-flight-camera-mode","text":"Using this method, you can install obcam and activate the flight camera mode simultaneously. The brief setup gets under way using the script install.sh in the repository . If you want to know the steps of activation of the flight camera mode, see the section First you should download the repository using git clone (which requires network connection): git clone https://github.com/FROM-THE-EARTH/obcam.git And then, you can execute the brief setup like below: cd obcam sudo ./install.sh That's all setup of the flight camera mode of obcam . You can reboot the Raspberry Pi and run the flight camera program. Installation of git If git is not installed in the system, you can run the commands below and install git : sudo apt update sudo apt install git","title":"Brief setup for the flight camera mode"},{"location":"setup/#install-only-obcam-module","text":"obcam can be installed using pip . pip install git+https://github.com/FROM-THE-EARTH/obcam.git After the installation, you can use the obcam command to start the flight camera application. If pip is not installed in the system Right after the first booting of Raspberry Pi, pip might be not installed yet. In the situation, you can install pip following the procedures below: Download the script to install pip . After the command below is executed, the script get-pip.py is to be downloaded in the current directory. wget https://bootstrap.pypa.io/get-pip.py Execute the script get-pip.py . python get-pip.py","title":"Install only obcam module"},{"location":"setup/#activate-the-flight-camera-mode","text":"","title":"Activate the flight camera mode"},{"location":"setup/#about-the-flight-camera-mode","text":"In the flight camera mode, the application of the flight camera automatically starts when booting a Raspberry Pi. To activate the flight camera mode, the procedures below is required: Network and camera settings . Install obcam . Writing a gileum file for the flight camera . Activate the flight camera mode .","title":"About the flight camera mode"},{"location":"setup/#writing-a-gileum-file","text":"Gileum files are kinds of setting files of the application. You should write a gileum file glm.py before activation of the flight camera mode. The gileum file glm.py is in the repository, so you can overwrite the file after downloding the repository. Details of the setting parameters are written in the page . But please note that the settings are already done in the glm.py when downloading the repository, so you doesn't have to change the settings if there are no certain reasons .","title":"Writing a gileum file"},{"location":"setup/#just-activate-the-flight-camera-mode","text":"Using the script scripts/activate_flightcam.sh , you can activate the flight camera mode. The scripts/activate_flihgtcam.sh is also in the repository . sudo ./scripts/activate_flightcam.sh","title":"Just activate the flight camera mode"},{"location":"setup/#details-of-the-activation","text":"In this section, details of the activate process is described. The process is not complicated so much. The point is to update the /etc/rc.local file in the system. The file /etc/rc.local is a shell script to be executed at booting. The script scripts/activate_flightcam.sh inserts the line to /etc/rc.local , in order to execute the obcam program like that: # /etc/rc.local # Some lines ... /usr/bin/python -m obcam /usr/local/src/obcam/glm.py exit 0 As you can see, the obcam program is executed giving the gileum file /usr/local/src/obcam/glm.py , which is copied when executing scripts/activate_flightcam.sh . Therefore, there is no effects in terms of the flight camera application if you change the content of the glm.py in the downloaded repository, because obcam refers /usr/local/src/obcam/glm.py . If you want apply the change of the glm.py in the downloaded repository, just run scripts/activate_flightcam.sh again, or copy the glm.py to /usr/local/src/obcam/glm.py .","title":"Details of the activation"},{"location":"troubleshooting/","text":"Trouble Shooting When SD cards are broken Insert a broken SD card to your PC. If possible, clean up and rewrite the OS image referencing the section . If the trial fails, you should use new SD card and write in the OS image to the SD card. When camera is not detected Confirm if legacy camera support is enabled or not, referencing the section . Confirm if camera cable is connected properly or not. If the trouble is not solved in spite of the operations above, change camera or Raspberry Pi. When obcam doesn't work regardless of activation of the flight camera mode Connect a monitor and keyboard to the Raspberry Pi and check log output from obcam . Execute obcam in the terminal and check the response. sudo obcam /usr/local/src/obcam/glm.py If obcam is not installed, install obcam and activate the flight camera mode, referencing the section . If obcam successfully run in this way, it is possible that the flight camera mode is deactivated. Thus, activate the flight camera mode: sudo /usr/local/src/obcam/scripts/activate_flightcam.sh If the shell tells you that /usr/local/src/obcam/glm.py doesn't exist, it is possible that the flight camera mode have never been activated. Thus, activate the flight camera mode: sudo /usr/local/src/obcam/scripts/activate_flightcam.sh","title":"Trouble Shooting"},{"location":"troubleshooting/#trouble-shooting","text":"","title":"Trouble Shooting"},{"location":"troubleshooting/#when-sd-cards-are-broken","text":"Insert a broken SD card to your PC. If possible, clean up and rewrite the OS image referencing the section . If the trial fails, you should use new SD card and write in the OS image to the SD card.","title":"When SD cards are broken"},{"location":"troubleshooting/#when-camera-is-not-detected","text":"Confirm if legacy camera support is enabled or not, referencing the section . Confirm if camera cable is connected properly or not. If the trouble is not solved in spite of the operations above, change camera or Raspberry Pi.","title":"When camera is not detected"},{"location":"troubleshooting/#when-obcam-doesnt-work-regardless-of-activation-of-the-flight-camera-mode","text":"Connect a monitor and keyboard to the Raspberry Pi and check log output from obcam . Execute obcam in the terminal and check the response. sudo obcam /usr/local/src/obcam/glm.py If obcam is not installed, install obcam and activate the flight camera mode, referencing the section . If obcam successfully run in this way, it is possible that the flight camera mode is deactivated. Thus, activate the flight camera mode: sudo /usr/local/src/obcam/scripts/activate_flightcam.sh If the shell tells you that /usr/local/src/obcam/glm.py doesn't exist, it is possible that the flight camera mode have never been activated. Thus, activate the flight camera mode: sudo /usr/local/src/obcam/scripts/activate_flightcam.sh","title":"When obcam doesn't work regardless of activation of the flight camera mode"}]}